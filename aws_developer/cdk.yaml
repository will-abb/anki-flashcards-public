"AWS CDK": |
  Define your cloud infrastructure using a familiar language: JavaScript/TypeScript, Python, Java, and .NET.
  Contains high level components called constructs.
  The code is “compiled” into a CloudFormation template (JSON/YAML).
  You can therefore deploy infrastructure and application runtime code together.
  Great for Lambda functions and Docker containers in ECS/EKS.
"CDK Application Constructs": |
  Programming languages are used to define constructs.
  CDK CLI uses `cdk synth` to convert code into a CloudFormation template.
"CDK vs SAM": |
  SAM:
    - Serverless focused.
    - Write your template declaratively in JSON or YAML.
    - Great for quickly getting started with Lambda.
    - Leverages CloudFormation.
  CDK:
    - Supports all AWS services.
    - Write infrastructure in a programming language (JavaScript/TypeScript, Python, Java, and .NET).
    - Leverages CloudFormation.
"CDK + SAM": |
  You can use SAM CLI to locally test your CDK apps.
  You must first run `cdk synth`.
  Example:
    - CDK Application: MyCDKApp
    - Lambda function: myFunction
    - Command: cdk synth
    - Template: MyCDKStack.template.json
    - SAM CLI: sam local invoke -t MyCDKStack.template.json myFunction
"CDK Constructs": |
  CDK Construct is a component that encapsulates everything CDK needs to create the final CloudFormation stack.
  Can represent a single AWS resource (e.g., S3 bucket) or multiple related resources (e.g., worker queue with compute).
  AWS Construct Library contains Constructs for every AWS resource.
  Contains 3 different levels of Constructs available (L1, L2, L3).
  Construct Hub contains additional Constructs from AWS, 3rd parties, and the open-source CDK community.
"CDK Constructs - Layer 1 (L1)": |
  Represents all resources directly available in CloudFormation.
  Constructs are periodically generated from CloudFormation Resource Specification.
  Construct names start with Cfn (e.g., CfnBucket).
  You must explicitly configure all resource properties.
"CDK Constructs - Layer 2 (L2)": |
  Represents AWS resources but with a higher level (intent-based API).
  Similar functionality as L1 but with convenient defaults and boilerplate.
  You don’t need to know all the details about the resource properties.
  Provide methods that make it simpler to work with the resource (e.g., bucket.addLifeCycleRule()).
"CDK Constructs - Layer 3 (L3)": |
  Can be called Patterns, which represents multiple related resources.
  Helps you complete common tasks in AWS.
  Examples:
    - aws-apigateway.LambdaRestApi represents an API Gateway backed by a Lambda function.
    - aws-ecs-patterns.ApplicationLoadBalancerFargateService represents an architecture that includes a Fargate cluster with Application Load Balancer.
"CDK - Important Commands": |
  Commands:
    - npm install -g aws-cdk-lib: Install the CDK CLI and libraries.
    - cdk init app: Create a new CDK project from a specified template.
    - cdk synth: Synthesizes and prints the CloudFormation template.
    - cdk bootstrap: Deploys the CDK Toolkit staging Stack.
    - cdk deploy: Deploy the Stack(s).
    - cdk diff: View differences of local CDK and deployed Stack.
    - cdk destroy: Destroy the Stack(s).
"CDK - Bootstrapping": |
  The process of provisioning resources for CDK before you can deploy CDK apps into an AWS environment.
  AWS Environment = account & region.
  CloudFormation Stack called CDKToolkit is created and contains:
    - S3 Bucket to store files.
    - IAM Roles to grant permissions to perform deployments.
  You must run the following command for each new environment:
    - cdk bootstrap aws://<aws_account>/<aws_region>
  Otherwise, you will get an error “Policy contains a statement with one or more invalid principal”.
  Example:
    - AWS Region: eu-west-1
    - AWS Account: 123456789012
    - Command: cdk bootstrap aws://123456789012/eu-west-1
"CDK - Testing": |
  To test CDK apps, use CDK Assertions Module combined with popular test frameworks such as Jest (JavaScript) or Pytest (Python).
  Verify we have specific resources, rules, conditions, parameters.
  Two types of tests:
    - Fine-grained Assertions (common): Test specific aspects of the CloudFormation template (e.g., check if a resource has this property with this value).
    - Snapshot Tests: Test the synthesized CloudFormation template against a previously stored baseline template.
  To import a template:
    - Template.fromStack(MyStack): Stack built in CDK.
    - Template.fromString(mystring): Stack built outside CDK.
